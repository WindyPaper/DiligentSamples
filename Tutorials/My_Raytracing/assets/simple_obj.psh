#include "simple_obj_common.csh"

Texture3D    g_Texture;
SamplerState g_Texture_sampler; // By convention, texture samplers must use the '_sampler' suffix

struct PSInput 
{ 
    float4 Pos   : SV_POSITION; 
    float2 UV : TEX_COORD; 
    float3 PixelWPos : TEX_COORD1;
    float3 WNormal : TEX_COORD2;
};

struct PSOutput
{ 
    float4 Color : SV_TARGET; 
    float depth : SV_Depth;
};

// Note that if separate shader objects are not supported (this is only the case for old GLES3.0 devices), vertex
// shader output variable name must match exactly the name of the pixel shader input variable.
// If the variable has structure type (like in this example), the structure declarations must also be indentical.
void main(in  PSInput  PSIn,
          out PSOutput PSOut)
{
    float3 view_dir = normalize(g_CamPos - PSIn.PixelWPos.xyz);
    float3 bake_start_dir_on_Plane = float3(1.0f, 0.0f, 0.0f);
    float sample_z = 1.0f - (dot(bake_start_dir_on_Plane, normalize(float3(view_dir.x, 0.0f, view_dir.z))) * 0.5f + 0.5f);
    //PSOut.Color = g_Texture.Sample(g_Texture_sampler, float3(PSIn.UV, 0.0f)); 
    float4 bake_data = g_Texture.Sample(g_Texture_sampler, float3(PSIn.UV, sample_z));
    //PSOut.Color = float4(bake_data.rgb, 1.0f);
    PSOut.Color = float4(bake_data.r, bake_data.g, bake_data.b, 1.0f) + bake_data * 0.00001f;
    

    float offset_depth = ((1.0f / (bake_data.a + 0.00001f)) - 1.0f) * 10.0f;

    //depth-correction
    float cosV = dot(PSIn.WNormal, view_dir);
    float cosBakeDir = dot(PSIn.WNormal, -g_BakeDirAndNum.xyz);
    float correct_depth = cosV / cosBakeDir * offset_depth;

    float3 new_offset_pos = PSIn.PixelWPos - view_dir * correct_depth;

    float offsett = saturate(correct_depth - offset_depth);
    //PSOut.Color = float4(offsett, offsett, offsett, 1.0f) + bake_data * 0.00001f;

    //float4 new_ndc_pos = mul(float4(new_offset_pos,1.0), g_WorldViewProj);
    float4 new_ndc_pos = mul(float4(new_offset_pos, 1.0f), g_WorldViewProj);
    float new_depth = new_ndc_pos.z / new_ndc_pos.w;

    PSOut.depth = new_depth;

    //PSOut.OutDepth = g_Texture.Sample(g_Texture_sampler, float3)
}
