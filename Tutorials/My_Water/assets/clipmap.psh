Texture2D    g_DiffTexture;
SamplerState g_DiffTexture_sampler; // By convention, texture samplers must use the '_sampler' suffix

Texture2D    g_displacement_tex;
SamplerState g_displacement_tex_sampler; // By convention, texture samplers must use the '_sampler' suffix

struct PSInput 
{ 
    float4 Pos   : SV_POSITION;
    float2 UV  : TEX_COORD;
    float3 Normal : TEX_COORD1;
};

struct PSOutput
{ 
    float4 Color : SV_TARGET; 
};

float3 CalWorldNormal(float2 TexCoord, float PixelSize, float TexelSize)
{
    float3 center = g_displacement_tex.Sample(g_displacement_tex_sampler, TexCoord).xyz;
    float3 right = float3(TexelSize, 0.0f, 0.0f) + g_displacement_tex.Sample(g_displacement_tex_sampler, TexCoord + float2(PixelSize, 0.0f)).xyz - center;
    float3 left = float3(-TexelSize, 0.0f, 0.0f) + g_displacement_tex.Sample(g_displacement_tex_sampler, TexCoord + float2(-PixelSize, 0.0f)).xyz - center;
    float3 top = float3(0.0f, 0.0f, TexelSize) + g_displacement_tex.Sample(g_displacement_tex_sampler, TexCoord + float2(0.0f, PixelSize)).xyz - center;
    float3 bottom = float3(0.0f, 0.0f, -TexelSize) + g_displacement_tex.Sample(g_displacement_tex_sampler, TexCoord + float2(0.0f, -PixelSize)).xyz - center;

    float3 TopRight = cross(right, top);
    float3 TopLeft = cross(top, left);
    float3 BottomLeft = cross(left, bottom);
    float3 BottomRight = cross(bottom, right);

    return normalize(TopRight + TopLeft + BottomLeft + BottomRight);
}

// Note that if separate shader objects are not supported (this is only the case for old GLES3.0 devices), vertex
// shader output variable name must match exactly the name of the pixel shader input variable.
// If the variable has structure type (like in this example), the structure declarations must also be indentical.
void main(in  PSInput  PSIn,
          out PSOutput PSOut)
{
    float N = 256.0f;
    float WaterTextureScale = 5.0;
    float L = 1000.0f;
    float PixelSize = 1.0f / N * WaterTextureScale;
    float TexelSize = L / N / WaterTextureScale;
    float3 WorldNormal = CalWorldNormal(PSIn.UV, PixelSize, TexelSize);

	float3 LightDir = normalize(float3(0, 1, 0));	
	float ndl = saturate(dot(LightDir, WorldNormal));
	float3 DirLightIrradiance = ndl * float3(1, 1, 1);
	float3 Ambient = float3(0.1, 0.1, 0.1);

    float3 center = g_displacement_tex.Sample(g_displacement_tex_sampler, PSIn.UV).xyz * 0;

    PSOut.Color.rgb = DirLightIrradiance;//DirLightIrradiance; //g_DiffTexture.Sample(g_DiffTexture_sampler, PSIn.UV); //float4(1.0, 1.0, 1.0, 1.0); 
    PSOut.Color.a = 1.0;

    //float morphv = PSIn.Morph.x;
    //PSOut.Color = float4(morphv, morphv, morphv, 1.0f); //float4(1.0, 1.0, 1.0, 1.0); 
}
